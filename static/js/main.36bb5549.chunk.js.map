{"version":3,"sources":["Components/images/logo.png","Components/Navbar.js","Components/tmdbreducer.js","Components/Tmdbcontext.js","Components/Pages/Home.js","Components/Pages/About.js","Components/images/defaultposter.png","Components/Pages/SingleMovie.js","Components/Pages/Error.js","Components/Pagination2.js","Components/Pages/Movieslist.js","Components/Pages/Toprated.js","Components/Pages/Popular.js","Components/Pages/Upcoming.js","Components/Trending.js","Components/Links.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","to","src","logo","alt","exact","activeClassName","tmdbReducer","tmdbState","action","type","searchText","payload","includes","dataType","toLowerCase","total_pages","total_results","total_lists","results","newObject","firstPhaseData","total_pages_to_show","Math","ceil","moviesType","currentPage","number","pageStart","pagesPerScreen","searchresults","initialTmdbState","singleMovieData","movieData","isLoading","trending","popular","top_rated","upcoming","TmdbContext","React","createContext","TmdbContextProvider","children","useReducer","dispatch","getMoviesByType","url","urlTemplate","page","process","alert","fetch","then","response","json","datas","toUpperCase","catch","error","useEffect","pages","Provider","value","updateSearchText","prevPage","getMoreAboutMovies","movie_id","dataa","nextPage","updatePage","clearSearchResults","useGlobalTmdbContext","useContext","Home","placeholder","onChange","e","target","length","onClick","About","SingleMovie","movie_container","useRef","ref","LoginHandler","current","contains","window","history","go","document","addEventListener","removeEventListener","useCloseOnOutsideClick","scrollTo","id","useParams","title","adult","poster_path","crew","credits","genres","youtube","trailers","homepage","overview","release_date","tagline","runtime","spoken_languages","defaultposter","map","item","name","join","english_name","filter","crewitem","open","linkyoutube","source","Error","style","color","location","href","Pagination2","moviesData","PagesNum","Array","from","v","k","Movieslist","movieslisttoshow","slice","display","movieItem","Toprated","Popular","Upcoming","Trending","media_type","Links","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.36bb5549.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.a48c7ae9.png\";","import React from 'react'\r\nimport logo from \"./images/logo.png\"\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Navbar = () => {\r\n    return (<>\r\n        <div className=\"navbar\">\r\n            <NavLink to=\"/\">\r\n            <img className=\"logo-image\" src={logo} alt=\"\" />\r\n            </NavLink>\r\n                <ul className=\"navbar-items\">\r\n                    <li className=\"navbar-item\" >\r\n                    <NavLink exact to=\"/\" activeClassName=\"active\">Home</NavLink>\r\n                </li>\r\n                <li className=\"navbar-item\">\r\n                    <NavLink to=\"/about\" activeClassName=\"active\">About</NavLink>\r\n                </li>\r\n                </ul>\r\n\r\n\r\n\r\n        \r\n        </div>\r\n    </>\r\n    )\r\n}\r\nexport default Navbar\r\n","import { initialTmdbState } from \"./Tmdbcontext\"\r\n\r\nexport const tmdbReducer = (tmdbState, action) => {\r\n    if (action.type === \"UPDATE_SEARCH_TEXT\") {\r\n        return { ...tmdbState, searchText: action.payload }\r\n    }\r\n    if ([\"TRENDING\", \"POPULAR\", \"TOP_RATED\", \"UPCOMING\", \"SEARCHRESULTS\"].includes(action.type)) {\r\n        const dataType = action.type.toLowerCase()\r\n        let { total_pages, total_results, total_lists } = tmdbState[dataType]\r\n        total_pages = action.payload.total_pages\r\n        total_results = action.payload.total_results\r\n        total_lists = [...tmdbState[dataType].total_lists, ...action.payload.results]\r\n        let newObject = { ...tmdbState[dataType], total_pages: total_pages, total_results: total_results, total_lists: total_lists, firstPhaseData: true }\r\n        if (dataType === \"searchresults\") {\r\n            newObject = { ...newObject, total_pages_to_show: Math.ceil(total_results / 10) }\r\n        }\r\n        return { ...tmdbState, [dataType]: newObject }\r\n\r\n    }\r\n    if (action.type === \"UPDATE_PAGE\") {\r\n        const newObject = { ...tmdbState[action.payload.moviesType], currentPage: action.payload.number }\r\n        return { ...tmdbState, [action.payload.moviesType]: newObject }\r\n\r\n    }\r\n    if (action.type === \"NEXT_PAGE\") {\r\n        let newObject;\r\n        const { currentPage, pageStart, total_pages_to_show } = tmdbState[action.payload]\r\n        if (currentPage === total_pages_to_show) {\r\n            newObject = { ...tmdbState[action.payload], pageStart: 1, currentPage: 1 }\r\n        }\r\n        else if (currentPage % tmdbState.pagesPerScreen === 0) {\r\n            newObject = { ...tmdbState[action.payload], pageStart: pageStart + tmdbState.pagesPerScreen, currentPage: currentPage + 1 }\r\n        }\r\n        else {\r\n            newObject = { ...tmdbState[action.payload], currentPage: currentPage + 1 }\r\n        }\r\n\r\n        return { ...tmdbState, [action.payload]: newObject }\r\n\r\n    }\r\n    if (action.type === \"PREV_PAGE\") {\r\n        let newObject;\r\n        const { currentPage, pageStart, total_pages_to_show } = tmdbState[action.payload]\r\n        if (currentPage === 1) {\r\n            // newObject = { ...tmdbState[action.payload], pageStart: total_pages_to_show - 4, currentPage: total_pages_to_show }\r\n            newObject = { ...tmdbState[action.payload], pageStart: ( total_pages_to_show%5===0?total_pages_to_show-4:total_pages_to_show - (total_pages_to_show%5)+1), currentPage: total_pages_to_show }\r\n        }\r\n        else if ((currentPage - 1) % tmdbState.pagesPerScreen === 0) {\r\n            newObject = { ...tmdbState[action.payload], pageStart: pageStart - tmdbState.pagesPerScreen, currentPage: currentPage - 1 }\r\n        }\r\n        else {\r\n            newObject = { ...tmdbState[action.payload], currentPage: currentPage - 1 }\r\n        }\r\n        return { ...tmdbState, [action.payload]: newObject }\r\n\r\n    }\r\n    if (action.type === \"CLEAR_SEARCH\") {\r\n        return { ...tmdbState,searchresults:initialTmdbState[\"searchresults\"] }\r\n    }\r\n    if (action.type === \"MOVIE_DATA_RECEIVED\") {\r\n        return { ...tmdbState,singleMovieData:{movieData:action.payload,isLoading:false}}\r\n    }\r\n\r\n}\r\n\r\n","import React,{useContext,useReducer,useEffect} from \"react\"\r\nimport {tmdbReducer} from \"./tmdbreducer\"\r\nexport const initialTmdbState={\r\n    trending:{total_pages:0,total_pages_to_show:20,total_results:0,total_lists:[],firstPhaseData:false,currentPage:1,pageStart:1},\r\n    popular:{total_pages:0,total_pages_to_show:20,total_results:0,total_lists:[],firstPhaseData:false,currentPage:1,pageStart:1},\r\n    top_rated:{total_pages:0,total_pages_to_show:20,total_results:0,total_lists:[],firstPhaseData:false,currentPage:1,pageStart:1},\r\n    upcoming:{total_pages:0,total_pages_to_show:20,total_results:0,total_lists:[],firstPhaseData:false,currentPage:1,pageStart:1},\r\n    searchresults:{total_pages:0,total_pages_to_show:4,total_results:0,total_lists:[],firstPhaseData:false,currentPage:1,pageStart:1},\r\n    pagesPerScreen:5,\r\n    searchText:\"\",\r\n    singleMovieData:{movieData:{},isLoading:true},\r\n}\r\n\r\nconst TmdbContext=React.createContext()\r\nexport const TmdbContextProvider=({children})=>{\r\n    const [tmdbState, dispatch] = useReducer(tmdbReducer, initialTmdbState)\r\nconst updateSearchText=(value)=>dispatch({type:\"UPDATE_SEARCH_TEXT\",payload:value})\r\nconst clearSearchResults=()=>{\r\n    dispatch({type:\"CLEAR_SEARCH\"})\r\n}\r\n    const getMoviesByType=(url,page=1,)=>{\r\n        let urlTemplate;\r\n        if (url===\"trending\"){\r\n         urlTemplate=`https://api.themoviedb.org/3/${url}/movie/day?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=en-US&page=${page}`\r\n        }\r\n        else if([\"top_rated\",\"popular\",\"upcoming\"].includes(url)){\r\n         urlTemplate=`https://api.themoviedb.org/3/movie/${url}?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=en-US&page=${page}`}\r\n        else if(url===\"searchresults\"){\r\n            urlTemplate=`https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=en-US&query=${tmdbState.searchText}&page=${page}&include_adult=false`\r\n        }\r\n        else{\r\n            alert(\"the movie type you are searching is undefined\")\r\n            return;\r\n        }\r\n        fetch(urlTemplate)\r\n        .then(response=>response.json())\r\n        .then(datas=>{\r\n          \r\n            dispatch({type:url.toUpperCase(),payload:datas})\r\n            \r\n        })\r\n        .catch(error=>alert(\"there was an error while fetching the data.Sorry for the inconvenience caused\"))\r\n }\r\n useEffect(() => {\r\n     \r\n    if(tmdbState[\"searchresults\"].firstPhaseData){\r\n        for(let pages=2;pages<=(tmdbState[\"searchresults\"].total_pages);pages++){\r\n            getMoviesByType(\"searchresults\",pages)\r\n        }\r\n    }\r\n}, [tmdbState[\"searchresults\"].firstPhaseData])\r\n\r\n\r\n useEffect(() => {\r\n    if(tmdbState[\"trending\"].firstPhaseData){\r\n        for(let pages=2;pages<=(tmdbState[\"trending\"].total_pages_to_show)/2;pages++){\r\n            getMoviesByType(\"trending\",pages)\r\n        }\r\n    }\r\n\r\n}, [tmdbState[\"trending\"].firstPhaseData])\r\n\r\nuseEffect(() => {\r\n    if(tmdbState[\"top_rated\"].firstPhaseData){\r\n        for(let pages=2;pages<=(tmdbState[\"top_rated\"].total_pages_to_show)/2;pages++){\r\n                 getMoviesByType(\"top_rated\",pages)\r\n             }\r\n    }\r\n}, [tmdbState[\"top_rated\"].firstPhaseData])\r\n\r\nuseEffect(() => {\r\n    if(tmdbState[\"popular\"].firstPhaseData){\r\n        for(let pages=2;pages<=(tmdbState[\"popular\"].total_pages_to_show)/2;pages++){\r\n                 getMoviesByType(\"popular\",pages)\r\n             }\r\n    }\r\n}, [tmdbState[\"popular\"].firstPhaseData])\r\n\r\nuseEffect(() => {\r\n    if(tmdbState[\"upcoming\"].firstPhaseData){\r\n        for(let pages=2;pages<=(tmdbState[\"upcoming\"].total_pages_to_show)/2;pages++){\r\n                 getMoviesByType(\"upcoming\",pages)\r\n             }\r\n    }\r\n}, [tmdbState[\"upcoming\"].firstPhaseData])\r\nconst getMoreAboutMovies=(movie_id)=>{\r\n        fetch(`https://api.themoviedb.org/3/movie/${movie_id}?api_key=${process.env.REACT_APP_TMDB_API_KEY}&language=en-US&&append_to_response=credits%2Cimage%2Ctrailers`)\r\n        .then(response=>response.json())\r\n        .then(dataa=>dispatch({type:\"MOVIE_DATA_RECEIVED\",payload:dataa}))\r\n        .catch(error=>alert(\"there was an error while fetching the data sorry for the inconvinience\"))\r\n    }\r\n\r\n    const prevPage=(moviesType)=>{dispatch({type:\"PREV_PAGE\",payload:moviesType})}\r\n    const nextPage=(moviesType)=>{dispatch({type:\"NEXT_PAGE\",payload:moviesType})}\r\n    const updatePage=(number,moviesType)=>{dispatch({type:\"UPDATE_PAGE\",payload:{number:number,moviesType:moviesType}})}\r\n\r\n    return(\r\n        <TmdbContext.Provider value={{...tmdbState,updateSearchText,getMoviesByType,prevPage,getMoreAboutMovies,nextPage,updatePage,clearSearchResults}}>\r\n            {children}\r\n\r\n        </TmdbContext.Provider>\r\n    )\r\n}\r\nexport const useGlobalTmdbContext=()=>useContext(TmdbContext)\r\n","import React from 'react'\r\nimport { useGlobalTmdbContext } from '../Tmdbcontext'\r\nimport {Link} from \"react-router-dom\"\r\n\r\nconst Home = () => {\r\n    const {getMoviesByType,updateSearchText,searchText,clearSearchResults}=useGlobalTmdbContext()\r\n    return (<>\r\n        <div className=\"search-container\">\r\n            <input placeholder=\"search movies\" type=\"text\" onChange={(e) => updateSearchText(e.target.value)} value={searchText} className=\"serach-text\" />\r\n\r\n            <Link to={`${searchText.length!==0?\"/movies\":\"/\"}`}><button className=\"btn-primary\"\r\n                onClick={() => {\r\n                    clearSearchResults();\r\n                    (searchText.length!==0?getMoviesByType(\"searchresults\"):alert(\"SearchBox Can't be empty\"))}}>Search</button>\r\n                </Link>\r\n        </div>\r\n\r\n    </>)\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n             This is about page\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","export default __webpack_public_path__ + \"static/media/defaultposter.79451683.png\";","import React, { useEffect,useRef } from 'react'\r\nimport defaultposter from \"../images/defaultposter.png\"\r\nimport { useParams } from 'react-router-dom'\r\nimport { useGlobalTmdbContext } from '../Tmdbcontext'\r\nimport {FaQuoteLeft,FaQuoteRight} from \"react-icons/fa\"\r\nimport {AiFillCloseSquare,AiOutlineYoutube} from \"react-icons/ai\"\r\nimport {BiCameraMovie} from \"react-icons/bi\"\r\nfunction useCloseOnOutsideClick(ref) {\r\n    //function to close the movie details if clicked outside\r\n    function LoginHandler(e) {\r\n        if (ref.current && !ref.current.contains(e.target)) {\r\n            window.history.go(-1)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n            document.addEventListener(\"click\", LoginHandler)\r\n            return () => {\r\n                document.removeEventListener(\"click\", LoginHandler)\r\n        }\r\n    }, [])\r\n}\r\nconst SingleMovie = () => {\r\n    const movie_container = useRef(null);\r\n    useCloseOnOutsideClick(movie_container)\r\n    window.scrollTo(0, 0) // it takes you to top of page not where you are scrolling\r\n    const { id } = useParams()\r\n    const { getMoreAboutMovies, singleMovieData: { movieData, isLoading } } = useGlobalTmdbContext()\r\n    useEffect(() => {\r\n        getMoreAboutMovies(id)\r\n    }, [])\r\n    if (isLoading) {\r\n        return (<div className=\"data-loading\">Loading ...</div>)\r\n    }\r\n    const { title, adult, poster_path, credits: { crew }, genres, trailers:{youtube},homepage, overview, release_date, tagline, runtime, spoken_languages } = movieData\r\n    return (<>\r\n        <div ref={movie_container} className=\"movie-container\">\r\n            <div className=\"movie-tagline\"><h2>{tagline!==\"\"?<><FaQuoteLeft/> {tagline} <FaQuoteRight/></>:null}</h2></div>\r\n            <div className=\"movie\">\r\n                <img src={poster_path === null ? defaultposter : `https://image.tmdb.org/t/p/w400${poster_path}`} className=\"movie-image\" alt=\"poster not available\" />\r\n                <div className=\"movie-details\">\r\n                    <h1 className=\"movie-title\"> {title} \r\n                    {adult === false ? null : <span className=\"movie-eighteen-plus\">18+</span>}</h1>\r\n                    <div className=\"movie-genre\"><span className=\"movie-key\"> Genre :</span>\r\n                        <span className=\"movie-value\"> {genres.map(item => item.name).join(' , ')}</span>\r\n                    </div>\r\n\r\n                    <div className=\"movie-langauge\"><span className=\"movie-key\"> Language :  </span>\r\n                        <span className=\"movie-value\"> {spoken_languages.map(item => item.english_name).join(\" , \")}</span> </div>\r\n                    <div className=\"random\"></div>\r\n\r\n\r\n                    <div className=\"movie-released-date\"><span className=\"movie-key\"> Released: </span>\r\n                        <span className=\"movie-value\"> {release_date}</span> </div>\r\n                    <div className=\"movie-time\"><span className=\"movie-key\"> Runtime :</span>\r\n                        <span className=\"movie-value\"> {runtime} min</span> </div>\r\n                    <div className=\"movie-writer\"><span className=\"movie-key\"> Writer :</span>\r\n                        <span className=\"movie-value\">{crew.filter(crewitem => crewitem[\"department\"] === \"Writing\")\r\n                            .map(item => item.name).join(\" , \")}</span> </div>\r\n\r\n\r\n                    <div className=\"movie-director\"><span className=\"movie-key\"> Director :</span>\r\n                        <span className=\"movie-value\">{crew.filter(crewitem => crewitem[\"department\"] === \"Directing\")\r\n                            .map(item => item.name).join(\" , \")}</span> </div>\r\n                    <div className=\"movie-plot\"><span className=\"movie-key\"> Plot :</span>\r\n                        <span className=\"movie-value\"> {overview}</span></div>\r\n                        <div className=\"external-links\">\r\n                            <span \r\n                            onClick={()=>(homepage.length!==0?window.open(homepage):alert(\"sorry , No Home Page available for this movie\"),\"_blank\")} className=\"external-link movie-link\"><BiCameraMovie/></span>\r\n                             <span \r\n                            onClick={()=>{\r\n                                const linkyoutube=youtube.filter(item=>item.type===\"Trailer\");\r\n                                (linkyoutube.length!==0? window.open(`https://www.youtube.com/watch?v=${linkyoutube[0].source}`,\"_blank\" ) :alert(\"No trailer available for this movie\"))}} \r\n                                className=\"external-link  youtube-link\"><AiOutlineYoutube/></span>\r\n                        </div>\r\n                </div>\r\n            <span onClick={()=>window.history.go(-1)}\r\n            className=\"movie-close-icon\"><AiFillCloseSquare/></span>\r\n            </div>\r\n\r\n        </div>\r\n    </>)\r\n}\r\nexport default SingleMovie","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Error = () => {\r\n    return (<>\r\n    <div className=\"error\" style={{color:\"white\"}}>Sorry the url \"{window.location.href}\" you requested is invalid </div>\r\n    <Link to=\"/\">\r\n    <button className=\"btn-primary\"> Go to Home</button>\r\n    </Link>\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Error\r\n","import React from 'react'\r\nimport { useGlobalTmdbContext } from './Tmdbcontext'\r\n\r\nconst Pagination2 = ({moviesType}) => {\r\n    const {[moviesType]:moviesData,prevPage,nextPage,updatePage}=useGlobalTmdbContext() \r\n    const {currentPage,pageStart,total_pages_to_show}=moviesData\r\n    // const PagesNum= Array.from({length:5},(v,k)=>k+pageStart)\r\n    const PagesNum= Array.from({length:(total_pages_to_show<pageStart+4?(total_pages_to_show-pageStart+1):5)},(v,k)=>k+pageStart)\r\n    return (<>\r\n    <ul  className=\"pagination2\">\r\n        <li className=\"prev_ pagination2-item\" onClick={()=>prevPage(moviesType)}>prev</li>\r\n        {PagesNum.map(number=>{\r\n            return(\r\n            <li key={number} onClick={()=>updatePage(number,moviesType)}\r\n            className={`${number===currentPage?\"active\":null} pagination2-item`}>{number}</li>\r\n        )\r\n        })}\r\n        <li className=\"next_ pagination2-item\" onClick={()=>nextPage(moviesType)}>next</li>\r\n    </ul>\r\n\r\n\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Pagination2\r\n","import React from 'react'\r\nimport { useGlobalTmdbContext } from '../Tmdbcontext'\r\nimport { Link } from \"react-router-dom\"\r\nimport Pagination2 from '../Pagination2'\r\nimport defaultposter from \"../images/defaultposter.png\"\r\nconst Movieslist = () => {\r\n    const {searchresults: { currentPage, total_lists }, searchText } = useGlobalTmdbContext()\r\n\r\n    const movieslisttoshow = total_lists.slice((currentPage - 1) * 10, currentPage * 10)\r\n    if(total_lists.length===0){\r\n        return(<><div className=\"sorry-message\"> Sorry, There is no movie available with the name \"<span className=\"title\">{searchText}</span>\"\r\n        <Link to=\"/\" className=\"btn-primary\" style={{display:\"inline-block\"}}>Back home</Link></div>\r\n        </>)\r\n    }\r\n\r\n    return (<>\r\n        <Pagination2 moviesType=\"searchresults\" />\r\n        <div className=\"search-movies\">\r\n            <div className=\"movies-searches\">\r\n                {movieslisttoshow.map(movieItem => {\r\n                    const { poster_path, id,  title, release_date } = movieItem\r\n                    return (\r\n                        <div key={id} className=\"movies-search\">\r\n                            <img src={poster_path === null ? defaultposter : `https://image.tmdb.org/t/p/w400${poster_path}`} className=\"search-image\" alt=\"poster not available\" />\r\n                            <div className=\"search-title\" >{title}</div>\r\n                            <div className=\"search-year\">Released :{release_date}</div>\r\n                            <Link to={`/movies/${id}`}className=\"btn-primary deatils\">deatils</Link>\r\n\r\n                        </div>\r\n                        )\r\n                })\r\n                }\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n            </div>\r\n        </div>\r\n    </>)\r\n\r\n}\r\n\r\nexport default Movieslist","import React,{useEffect} from 'react'\r\nimport { useGlobalTmdbContext } from '../Tmdbcontext'\r\nimport { Link } from \"react-router-dom\"\r\nimport Pagination2 from '../Pagination2'\r\nimport defaultposter from \"../images/defaultposter.png\"\r\n\r\n\r\nconst Toprated = () => {\r\n    const { top_rated: { currentPage, total_lists }, getMoviesByType } = useGlobalTmdbContext()\r\n    useEffect(() => {\r\n        getMoviesByType(\"top_rated\")\r\n    }, [])\r\n\r\n    const movieslisttoshow = total_lists.slice((currentPage - 1) * 10, currentPage * 10)\r\n\r\n    return (<>\r\n        <Pagination2 moviesType=\"top_rated\" />\r\n        <div className=\"toprated-movies\">\r\n            <div className=\"movies-searches\">\r\n                {movieslisttoshow.map(movieItem => {\r\n                    const { poster_path, id, title, release_date } = movieItem\r\n                    return (\r\n                        <div key={id} className=\"movies-search\">\r\n                            <img src={poster_path === null ? defaultposter : `https://image.tmdb.org/t/p/w400${poster_path}`} className=\"search-image\" alt=\"poster not available\" />\r\n                            <div className=\"search-title\" >{title}</div>\r\n                            {/* <div className=\"search-type\">Type: {media_type} </div> */}\r\n                            <div className=\"search-year\">Released :{release_date}</div>\r\n                            <Link to={`/movies/${id}`} className=\"btn-primary deatils\">deatils</Link>\r\n\r\n                        </div>\r\n                        )\r\n                })\r\n                }\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n            </div>\r\n        </div>\r\n    </>)\r\n\r\n}\r\n\r\nexport default Toprated\r\n","import React,{useEffect} from 'react'\r\nimport { useGlobalTmdbContext } from '../Tmdbcontext'\r\nimport { Link } from \"react-router-dom\"\r\nimport Pagination2 from '../Pagination2'\r\nimport defaultposter from \"../images/defaultposter.png\"\r\n\r\n\r\nconst Popular = () => {\r\n    const { popular: { currentPage, total_lists }, getMoviesByType } = useGlobalTmdbContext()\r\n    useEffect(() => {\r\n        getMoviesByType(\"popular\")\r\n    }, [])\r\n    \r\n    const movieslisttoshow = total_lists.slice((currentPage - 1) * 10, currentPage * 10)\r\n\r\n    return (<>\r\n        <Pagination2 moviesType=\"popular\" />\r\n        <div className=\"popular-movies\">\r\n            <div className=\"movies-searches\">\r\n                {movieslisttoshow.map(movieItem => {\r\n                    const { poster_path, id, title, release_date } = movieItem\r\n                    return (\r\n                        <div key={id} className=\"movies-search\">\r\n                        <img src={poster_path===null?defaultposter:`https://image.tmdb.org/t/p/w400${poster_path}`} className=\"search-image\" alt=\"poster not available\" />\r\n                            <div className=\"search-title\" >{title}</div>\r\n                            <div className=\"search-year\">Released :{release_date}</div>\r\n                            <Link to={`/movies/${id}`}className=\"btn-primary deatils\">deatils</Link>\r\n                        </div>\r\n                        )\r\n                    \r\n                })\r\n                }\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n            </div>\r\n        </div>\r\n    </>)\r\n\r\n}\r\n\r\nexport default Popular\r\n","import React,{useEffect} from 'react'\r\nimport defaultposter from \"../images/defaultposter.png\"\r\nimport { useGlobalTmdbContext } from '../Tmdbcontext'\r\nimport { Link } from \"react-router-dom\"\r\nimport Pagination2 from '../Pagination2'\r\n\r\n\r\nconst Upcoming = () => {\r\n    const { upcoming: { currentPage, total_lists }, getMoviesByType } = useGlobalTmdbContext()\r\n    useEffect(() => {\r\n        getMoviesByType(\"upcoming\")\r\n    }, [])\r\n\r\n    const movieslisttoshow = total_lists.slice((currentPage - 1) * 10, currentPage * 10)\r\n\r\n    return (<>\r\n        <Pagination2 moviesType=\"upcoming\" />\r\n        <div className=\"upvoming-movies\">\r\n            <div className=\"movies-searches\">\r\n                {movieslisttoshow.map(movieItem => {\r\n                    const { poster_path, id, title, release_date } = movieItem\r\n                    return (\r\n                        <div key={id} className=\"movies-search\">\r\n                            <img src={poster_path===null?defaultposter:`https://image.tmdb.org/t/p/w400${poster_path}`} className=\"search-image\" alt=\"poster not available\" />\r\n                            <div className=\"search-title\" >{title}</div>\r\n                            {/* <div className=\"search-type\">Type: {media_type} </div> */}\r\n                            <div className=\"search-year\">Release Date : {release_date}</div>\r\n                            <Link to={`/movies/${id}`}className=\"btn-primary deatils\">deatils</Link>\r\n                        </div>\r\n                        )\r\n\r\n                })\r\n                }\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n            </div>\r\n        </div>\r\n    </>)\r\n\r\n}\r\nexport default Upcoming\r\n","import React, { useEffect } from 'react'\r\nimport { useGlobalTmdbContext } from './Tmdbcontext'\r\nimport Pagination2 from './Pagination2'\r\nimport { Link } from \"react-router-dom\"\r\nimport defaultposter from \"./images/defaultposter.png\"\r\nconst Trending = () => {\r\n    const { trending: { currentPage, total_lists }, getMoviesByType } = useGlobalTmdbContext()\r\n\r\n    const movieslisttoshow = total_lists.slice((currentPage - 1) * 10, currentPage * 10)\r\n\r\n\r\n    useEffect(() => {\r\n        getMoviesByType(\"trending\")\r\n    }, [])\r\n    return (<>\r\n        <Pagination2 moviesType=\"trending\" />\r\n        <div className=\"trending-movies\">\r\n            <div className=\"movies-searches\">\r\n                {movieslisttoshow.map(movieItem => {\r\n                    const { poster_path, id, media_type, title, release_date } = movieItem\r\n                    return (\r\n                        <div key={id} className=\"movies-search\">\r\n                            <img src={poster_path === null ? defaultposter : `https://image.tmdb.org/t/p/w400${poster_path}`} className=\"search-image\" alt=\"poster not available\" />\r\n                            <div className=\"search-title\" >{title}</div>\r\n                            <div className=\"search-type\">Type: {media_type} </div>\r\n                            <div className=\"search-year\">Released :{release_date}</div>\r\n                            {/* <Link to=\"#\" onClick={() => getMoreAboutMovies(id)} className=\"btn-primary deatils\">deatils</Link> */}\r\n                            <Link to={`/movies/${id}`}className=\"btn-primary deatils\">deatils</Link>\r\n\r\n                        </div>\r\n                    )\r\n                })\r\n                }\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n                <div className=\"div-for-reponsive\"></div>\r\n            </div>\r\n        </div>\r\n    </>)\r\n}\r\nexport default Trending\r\n","import React from 'react'\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { useGlobalTmdbContext } from './Tmdbcontext'\r\n\r\nconst Links = () => {\r\n    const { getMoviesByType } = useGlobalTmdbContext()\r\n    return (\r\n        <div className=\"movies-by-type-btns\">\r\n            <NavLink exact to=\"/\" activeClassName=\"active\" className=\"movies-by-type-btn\"\r\n                onClick={() => getMoviesByType(\"trending\")}>Trending</NavLink>\r\n            <NavLink activeClassName=\"active\" className=\"movies-by-type-btn\" to=\"/TopRated\"\r\n            >TopRated</NavLink>\r\n            <NavLink activeClassName=\"active\" className=\"movies-by-type-btn\" to=\"/popular\"\r\n            >Popular</NavLink>\r\n            <NavLink activeClassName=\"active\" className=\"movies-by-type-btn\" to=\"/upcoming\"\r\n            >Upcoming</NavLink>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Links\r\n","import './App.css';\nimport Navbar from './Components/Navbar';\nimport Home from \"./Components/Pages/Home\"\nimport About from \"./Components/Pages/About\"\nimport SingleMovie from \"./Components/Pages/SingleMovie\"\nimport Error from \"./Components/Pages/Error\"\nimport Movieslist from './Components/Pages/Movieslist';\nimport Toprated from './Components/Pages/Toprated';\nimport Popular from './Components/Pages/Popular';\nimport Upcoming from './Components/Pages/Upcoming';\nimport Trending from './Components/Trending';\nimport Links from './Components/Links';\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n          <Links/>\n        <Trending/>\n        </Route>\n\n        <Route exact path=\"/about\">\n          <About />\n        </Route>\n\n        <Route path=\"/toprated\">\n          <Home/>\n          <Links/>\n          <Toprated />\n        </Route>\n\n        <Route path=\"/upcoming\">\n          <Home/>\n          <Links/>\n          <Upcoming />\n        </Route>\n\n        <Route path=\"/popular\">\n          <Home/>\n          <Links/>\n          <Popular />\n        </Route>\n      \n        <Route path=\"/movies/:id\">\n          <SingleMovie />\n        </Route>\n\n        <Route path=\"/movies/\">\n          <Home />\n          <Movieslist />\n        </Route>\n\n        <Route path=\"*\">\n          <Error />\n        </Route>\n\n      </Switch>\n\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {TmdbContextProvider} from \"./Components/Tmdbcontext\"\nimport \"./Components/css/navbar.css\"\nimport \"./Components/css/movieslist.css\"\nimport \"./Components/css/pagination.css\"\nimport \"./Components/css/pagination2.css\"\nimport \"./Components/css/movietype.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <TmdbContextProvider>\n         <App />\n         </TmdbContextProvider>\n \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}